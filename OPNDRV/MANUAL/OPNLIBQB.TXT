OPNLIBQB関数一覧

●OPNCHECK

[書式]
   OPNCHECK
[機能]
  OPNDRVの存在確認をします。
[解説]
  OPNDRVが常駐しているかどうかを調べ、バージョン番号を100倍した値を返します。
[戻り値]
  OPNDRVが常駐していれば、バージョン番号の100倍の値を、常駐していなければ0を返します。

●GETDIVISION

[書式]
   GETDIVISION(dat$)
[機能]
  OPN形式データのdivision値を得ます。
[解説]
　与えられたデータ(dat$)のdivision値(=4分音符の分解能)を得ます。もし、与えられたデータがOPN形式でない場合には、0を返します。
[戻り値]
　division値が返ります。OPN形式でない場合には0が返ります。

●GETOPNVER

[書式]
   GETOPNVER(dat$)
[機能]
  OPN形式データのバージョンを得ます。
[解説]
　与えられたデータ(dat$)がMML2OPN.EXEのどんなバージョンで作られたかを調べます。
　データバージョンの100倍値が返ります。もし、与えられたデータがOPN形式でない場合には、0を返します。
[戻り値]
　データバージョンの100倍が返ります。OPN形式でない場合には0が返ります。

●OPNSTART

[書式]
   OPNSTART(dat$)
[機能]
  OPN形式データの演奏を開始します。
[解説]
　付属のユーティリティーMML2OPN.EXEで作成されたOPN形式のデータを演奏します。dat$には、OPN形式データが入っている必要があります。
　この関数を呼び出すと一旦OPNDRVの内部バッファに転送されてから、演奏が開始されます。バッファサイズは、OPNDRV常駐時に/fオプションで指定することができます。
[戻り値]
  与えられたデータがOPN形式でない場合には0、バッファが足りない場合には-1、正常終了にはデータのバージョンの100倍値が返ります。
  
●MEND

[書式]
  CALL MEND
[機能]
  演奏を終了します。
[解説]
　OPNSTARTルーチンで演奏開始させたものを終了させます。
[戻り値]
　ありません。

●MFADE

[書式]
  CALL MFADE(fmspeed, psgspeed)
[機能]
  OPN演奏をフェードアウトします。
[解説]
　演奏中の曲にフェードアウトをかけます。fmspeedは、FM音源およびリズム音源のフェードアウトスピード、psgspeedは、PSG音源のフェードアウトスピードです。値が大きいほど、ゆっくりとフェードアウトします。
　フェードアウト後も、演奏終了にはなりません。演奏終了には、MENDルーチンを使用してください。
[戻り値]
　ありません。

●MREAD

[書式]
  CALL MREAD(ch, workno)
[機能]
  OPNDRVの内部ワークエリアを得ます。
[解説]
　OPNDRV内部で使用されているワークエリアを読みます。chに、チャネル番号(1〜3=FM音源1〜3、4〜6=PSG音源1〜3、7〜9=FM音源4〜6、10〜16=リズム音源1〜6、17〜18=割り込みチャネル1,2)を入れ、worknoに読みたいワーク番号を入れると、そのワークの内容が戻ります。
　ワーク番号は、以下の通りです。

FM/RTH音源用ワークエリア                PSG音源用ワークエリア

+-----+-------------------------------+ +-----+-------------------------------+
| NO. |  用途                         |	| NO. |  用途                         |
+-----+-------------------------------+	+-----+-------------------------------+
|   0 |音長(0〜127)                   |	|   0 |音長(0〜127)                   |
+-----+-------------------------------+	+-----+-------------------------------+
|   1 |音程                           |	|   1 |音程                           |
|     |上位4bitがオクターブ(0〜7)     |	|     |上位4bitがオクターブ(0〜7)     |
|     |下位4bitが音程(C=1,C+=2...B=12)|	|     |下位4bitが音程(C=1,C+=2...B=12)|
|     |          休符=0               |	|     |          休符=0               |
+-----+-------------------------------+	|     |ノイズモード時にはノイズ周波数 |
|   2 |キーオン時間                   |	+-----+-------------------------------+
+-----+-------------------------------+	|   2 |割り込み演奏フラグ(1で割り込み)|
|   3 |タイ                           |	+-----+-------------------------------+
+-----+-------------------------------+	|   3 |タイ                           |
|   4 |周波数下位8bit                 |	+-----+-------------------------------+
+-----+-------------------------------+	|   4 |ソフトウェアエンベロープ使用か |
|   5 |周波数上位8bit                 |	+-----+-------------------------------+
+-----+-------------------------------+	|   5 |ｿﾌﾄｳｪｱｴﾝﾍﾞﾛｰﾌﾟアドレス下位8bit |
|   6 |ポルタメントステップ           |	+-----+-------------------------------+
+-----+-------------------------------+	|   6 |ｿﾌﾄｳｪｱｴﾝﾍﾞﾛｰﾌﾟアドレス上位8bit |
|   7 |フラットタイムカウンタ         |	+-----+-------------------------------+
+-----+-------------------------------+	|   7 |ｿﾌﾄｳｪｱエンベロープスピード     |
|   8 |スピードカウンタ               |	+-----+-------------------------------+
+-----+-------------------------------+	|   8 |フェードアウトスピード         |
|   9 |ビブラート上下フラグ           |	+-----+-------------------------------+
+-----+-------------------------------+	|   9 |ボリューム                     |
|  10 |ステップ                       |	+-----+-------------------------------+
+-----+-------------------------------+	|  10 |トーン・ノイズモード値         |
|  11 |タイムスカウンタ               |	+-----+-------------------------------+
+-----+-------------------------------+	|  11 |周波数下位8bit                 |
|  12 |フェードアウトスピードカウンタ |	+-----+-------------------------------+
+-----+-------------------------------+	|  12 |周波数上位8bit                 |
|  13 |アルゴリズム                   |	+-----+-------------------------------+
+-----+-------------------------------+	|  13 |ポルタメントステップ           |
|  14 |OP1ボリューム                  |	+-----+-------------------------------+
+-----+-------------------------------+	|  14 |フラットタイムカウンタ         |
|  15 |OP2ボリューム                  |	+-----+-------------------------------+
+-----+-------------------------------+	|  15 |スピードカウンタ               |
|  16 |OP3ボリューム                  |	+-----+-------------------------------+
+-----+-------------------------------+	|  16 |ビブラートの上下フラグ         |
|  17 |OP4ボリューム                  |	+-----+-------------------------------+
+-----+-------------------------------+	|  17 |ステップカウンタ               |
|  18 |キーオフしたかどうか           |	+-----+-------------------------------+
+-----+-------------------------------+	|  18 |タイムスカウンタ               |
|  19 |データポインタアドレス下位8bit |	+-----+-------------------------------+
+-----+-------------------------------+	|  19 |ノイズ周波数                   |
|  20 |データポインタアドレス上位8bit |	+-----+-------------------------------+
+-----+-------------------------------+	|  20 |ノイズ用スライドスピードｶｳﾝﾀ   |
|  21 |スピード                       |	+-----+-------------------------------+
+-----+-------------------------------+	|  21 |ステップ                       |
|  22 |タイムス                       |	+-----+-------------------------------+
+-----+-------------------------------+	|  22 |フラットタイム                 |
|  23 |キーオン時間                   |	+-----+-------------------------------+
+-----+-------------------------------+	|  23 |スピード                       |
|  24 |周波数ずらし値                 |	+-----+-------------------------------+
+-----+-------------------------------+	|  24 |タイムス                       |
|  25 |フラットタイム                 |	+-----+-------------------------------+
+-----+-------------------------------+	|  25 |ｿﾌﾄｳｪｱｴﾝﾍﾞﾛｰﾌﾟｽﾀｰﾄｱﾄﾞﾚｽ下位8bit|
|  26 |フェードアウトスピード         |	+-----+-------------------------------+
+-----+-------------------------------+	|  26 |ｿﾌﾄｳｪｱｴﾝﾍﾞﾛｰﾌﾟｽﾀｰﾄｱﾄﾞﾚｽ上位8bit|
|27〜 |未使用                         |	+-----+-------------------------------+
|   30|                               |	|  27 |フェードアウトスピード         |
+-----+-------------------------------+	+-----+-------------------------------+
|   31|ビブラート有効OP               |	|  28 |ノイズ用スライドスピード       |
+-----+-------------------------------+	+-----+-------------------------------+
					|  29 |データポインタアドレス下位8bit |
                                        +-----+-------------------------------+
					|  30 |データポインタアドレス上位8bit |
					+-----+-------------------------------+
					|  31 |ディチューン                   |
					+-----+-------------------------------+

[戻り値]
  ワークの内容が戻ります。

●VARREAD

[書式]
   VARREAD(num)
[機能]
  OPNDRVの内部変数値を得ます。
[解説]
  内部変数の値を得ます。numで、内部レジスタ番号を指定します。0<=num<=99です。
[戻り値]
  指定された内部変数の値を返します。内部変数は1バイトですから、戻り値は0から255の間の数になります。

●MESCON

[書式]
  CALL MESCON
[機能]
  一時停止します。
[解説]
　OPNSTART関数で演奏させた曲を一時停止します。再開するには、MESCOFルーチンを使ってください。
[戻り値]
　ありません。

●MESCOF

[書式]
  CALL MESCOF
[機能]
  演奏再開します。
[解説]
　MESCONルーチンで一時停止させた曲を再開します。
[戻り値]
　ありません。

●TEMPOCHANGE

[書式]
  CALL TEMPOCHANGE(tempo, division)
[機能]
  テンポを変えます。
[解説]
　演奏中の曲のテンポをtempoに変更します。単位は、1分間当たりの4分音符の数です。変数divisionには、曲データのdivisionを指定してください(GETDIVISION関数で取得可能です)。
　なお、曲データ中にテンポ設定命令が出てくると、そちらのテンポに変更されます。
[戻り値]
　ありません。

●REGREAD

[書式]
  REGREAD(regno, sel)
[機能]
  FM音源チップ内のレジスタ値を得ます。
[解説]
　regnoで指定されたFM音源チップ内のレジスタ値を得ます。selで、YM2203とYM2608のレジスタ選択を行ないます。sel=0のとき、YM2203のレジスタが、sel=1のとき、YM2608のレジスタが選択されます。
　この関数は、FM音源チップ内からのデータを読むわけではないので、OPNDRV以外の制御でFM音源チップ内レジスタを変更した場合は、無効です。
[戻り値]
　FM音源チップ内のレジスタの値が返ります。

●GETSEMAX

[書式]
  GETSEMAX(dat$)
[機能]
  格納されているSEの数を返します。
[解説]
　dat$で指定されたSEデータに格納されているSEの数を返します。SEデータでない場合には、0を返します。
[戻り値]
　格納されているSEの数を返します。SEデータでない場合には0が返ります。dat$で指定したSEデータは、0〜getsemax(sdata)-1の番号のSEが存在することになります。

●GETSEVER

[書式]
  GETSEVER(dat$)
[機能]
  データがSEデータかどうかを調べます。
[解説]
　dat$で指定されたものがSEデータであるかどうかを調べます。
[戻り値]
　SEデータでない場合には0が返ります。SEデータであった場合には、SEデータのバージョンの100倍値が返ります。

●SESTORE

[書式]
  SESTORE(dat$)
[機能]
  効果音(SE)をOPNDRVの内部バッファに常駐させます。
[解説]
  dat$で指定されたSEデータをOPNDRV内部のバッファにコピーします。この関数でバッファにコピーした後、SESTARTルーチンで、バッファにコピーされたSEを鳴らすことが可能になります。
  SEのバッファは、OPNDRVの常駐時に/sオプションで指定します。
[戻り値]
  内部バッファへの格納がうまく行なわれた場合には、SEデータバージョンの100倍値を、SEデータでなかった場合には0を、内部バッファが足りない場合には、-1を返します。

●SESTART

[書式]
  CALL SESTART(num)
[機能]
  OPNDRVの内部バッファにコピーされたSEを鳴らします。
[解説]
  SESTOREルーチンで、OPNDRVの内部バッファにコピーされたSEを鳴らします。numで、SE番号を指定します。
[戻り値]
  ありません。
  
●MIDIINIT

[書式]
  MIDIINIT(interface)
[機能]
  MIDIをイニシャライズします。
[解説]
　MIDI制御部をイニシャライズし、以降MIDI関連のファンクションを使えるようにします。
  interfaceには、使用するMIDIインターフェースの種類を指定します。interface=1で、MPU-401が、interface=2でRS-232Cを選択します。
[戻り値]
　初期化成功ならば、0が戻ります。RS-232Cインターフェースを選択した場合には、必ず成功します。

●MIDISTART

[書式]
  MIDISTART(dat$)
[機能]
  MIDIデータを常駐させ、演奏します。
[解説]
  MIDIデータをOPNDRVの内部バッファに一旦コピーしてから、演奏を開始します。MIDIのバッファサイズは、OPNDRV常駐時に、/mオプションで指定します。
[戻り値]
  正常終了で0、演奏不能データならば1、バッファが足りない場合には-1を返します。
  
●MIDISTOP

[書式]
  CALL MIDISTOP
[機能]
  MIDIを一時停止します。
[解説]
　演奏中のMIDI曲を一時停止させます。再開するには、MIDICONTルーチンを使ってください。
[戻り値]
　ありません。

●MIDICONT

[書式]
  CALL MIDICONT
[機能]
  MIDI演奏を再開します。
[解説]
　MIDISTOPルーチンで一時停止した曲を再開します。
[戻り値]
　ありません。

●MIDITEMPO

[書式]
  CALL MIDITEMPO(tempo)
[機能]
  MIDIテンポを変えます。
[解説]
　演奏中の曲のテンポをtempo/256倍に変更します。範囲指定は特にありませんが、128<tempo<512の範囲を推奨します。あまりにも極端に小さい値や大きい値を与えると、割り込みが追い付かず、暴走することがあります。
[戻り値]
　ありません。

●MIDICLOSE

[書式]
  CALL MIDICLOSE
[機能]
  MIDI部を終了します。
[解説]
　MIDI関連を終了処理状態とし、以降MIDI関連ルーチンの使用を不可能にします。
　この関数を呼ぶと、タイマ割り込みを開放します。再度MIDIを使用可能にするには、MIDIINITルーチンを呼んでください。
[戻り値]
　ありません。

●MIDIEXT

[書式]
  CALL MIDIEXT
[機能]
  MIDI拡張メタイベントを許可します。
[解説]
　この関数を呼ぶと、以下、下記のメタイベントを特殊解釈します。
  (1)ff, 07, 04, 'M', 'a', 'r', 'k' 
     出てきた位置をマークします。
  (2)ff, 07, 04, 'J', 'u', 'm', 'p'
     1でマークした位置にジャンプします。
[戻り値]
　ありません。

●MIDISEND

[書式]
  CALL MIDISEND(dat)
[機能]
  MIDIデータ送出します。
[解説]
　datをMIDIインターフェースに1バイト送ります。
[戻り値]
　ありません。

●GETMIDI

[書式]
  GETMIDI
[機能]
  MIDIステータスを調べます。
[解説]
　MIDIステータスを見ます。ステータスは以下の通りです。

　下位8bit: 0=MIDI演奏中、1=待機中、2=演奏終了
  上位8bit: ペロシティー補正値

　ベロシティー補正値とは、現在の音量比率を指します。ボリューム比率は、ベロシティー補正値/128であり、ベロシティー補正値が128であれば通常ボリューム、256であれば、通常ボリュームの2倍ということになります。このステータスは、主にフェードアウトコマンド送出後、フェードアウトが完了したかどうかを調べるのに使います。詳しくは、MIDIFADEルーチンの説明をご覧ください。
[戻り値]
　上記のステータスが戻ります。

●MIDIFADE

[書式]
  CALL MIDIFADE(pstart, pend, speed)
[機能]
  フェードイン/アウト処理をします。
[解説]
　speed(単位はgatetime)(!=0)で指定した時間内で、音量をpstart/128倍からpend/128倍に直線的変化をさせます。
　pstart=128、pend=0とすれば、フェードアウトし、逆にpstart=0、pend=128とすればフェードインします。フェードイン/アウト終了後もこのボリューム補正値は持続しますので、通常ボリュームでの演奏に戻したい場合には、CALL MIDIFADE(128,128,1)とする必要があります。
[戻り値]
　ありません。

●PCMPLAY

[書式]
  PCMPLAY(dat$)
[機能]
  PCMを常駐再生させます。
[解説]
  dat$で指定したデータをPCM音源で再生します。その際、OPNDRVの内部バッファに一旦コピーされてから再生されます。バッファサイズは、OPNDRV常駐時に、/pオプションで指定します。
  データは、添付のWAV2PCM.EXEなどによりコンバートされたPCM形式データです。
  関数を呼んでから、実際に発音されるまでには多少時間がかかりますから注意して下さい。
[戻り値]
  PCMデータであれば、PCMデータのバージョンの100倍の値が返ります。バッファが足りない場合には、-1が返ります。PCMデータでなければ、-2が返ります。
  
●GETPCMVER

[書式]
  GETPCMVER(dat$)
[機能]
  PCMデータのバージョン値を得ます。
[解説]
　dat$で指定されたデータ列のバージョンを調べます。
[戻り値]
　PCMデータであれば、PCMデータのバージョンの100倍値が返ります。そうでない場合には、0が戻ります

●PCMSTOP

[書式]
  CALL PCMSTOP
[機能]
  PCM再生を停止します。
[解説]
　再生中のPCMを停止させます。
[戻り値]
　ありません。

●GETSTATUS

[書式]
  GETSTATUS
[機能]
  各種ステータスを得ます。
[解説]
　OPNDRVの各種ステータスを見ます。ステータスは以下の通りです。

  ビット0: FM音源再生 (0:再生中,1:停止中)
  ビット1: PCM音源再生(0:再生中,1:停止中)
  ビット4: ポート番号が(0:188h, 1:288h)
  ビット5: PCM音源が(0:存在しない,1:存在する)
  ビット6: YM2608が(0:存在しない,1:存在する)
  ビット7: FM音源ボードが(0:存在しない,1:存在する)
[戻り値]
　上記ステータスが戻ります。
