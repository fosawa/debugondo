OPNDRV ファンクション一覧

  OPNDRVファンクションは、int 41hを使用します。

●00:OPN演奏開始

[引数]
  ah = 0
  es:bx = 演奏データアドレス

  es:bxの差す内容

      FM音源チャネル1のデータアドレスオフセット(WORD)
      FM音源チャネル2〜3に関して同上
      PSG音源チャネル1〜3に関して同上
      FM音源チャネル4〜6に関して同上
      RTH音源チャネル1〜6に関して同上
  
  ※各データのセグメントは、esで示したものとなる。
  ※オフセットは、es:bxからのオフセット。

[戻り値]
  なし
[説明]
  FM音源,PSG音源,RTH音源の演奏を開始します。演奏終了まで、曲データを破壊しないでください。
  es:bxは、OPNファイルの第7バイト目を指せばOKです。

●01:OPN演奏終了

[引数]
  ah = 1
[戻り値]
  なし
[説明]
  FM音源,PSG音源,RTH音源の演奏を停止します。

●02:常駐SE再生

[引数]
  ah = 2
  bl = SE番号
[戻り値]
  なし
[説明]
  常駐しているSEを鳴らします。SE番号は、blレジスタで指定します。

●03:OPN演奏一時停止

[引数]
  ah = 3
[戻り値]
  なし
[説明]
  FM音源,PSG音源,RTH音源の演奏を一時停止します。再開には、ファンクション4の演奏再開を使ってください。

●04:OPN演奏再開

[引数]
  ah = 4
[戻り値]
  なし
[説明]
  ファンクション3で一時停止したFM音源,PSG音源,RTH音源の演奏を再開します。

●06:OPNフェードアウト

[引数]
  ah = 6
  bh = FM音源/RTH音源のフェードアウトスピード
  bl = PSG音源のフェードアウトスピード
[戻り値]
  なし
[説明]
  FM音源,PSG音源,RTH音源のフェードアウト処理をします。bh,blに指定する値が大きいほどゆっくりとフェードアウトします。フェードアウト後も演奏は続けられますので、再生を止めるには、フェードアウトファンクション呼び出し後、しばらくしてからファンクション1の演奏終了を呼ぶ必要があります。

●08:OPNワークエリアを読む

[引数]
  ah = 8
  dl = チャネル番号
  dh = ワーク番号

  チャネル番号
　　1〜3=FM音源チャネル1〜3
    4〜6=PSG音源チャネル1〜3
    7〜9=FM音源チャネル4〜6
    10〜15=RTH音源チャネル1〜6
    16=PSG割り込みチャネル1(PSGチャネル2に対応)
    17=PSG割り込みチャネル2(PSGチャネル3に対応)

[戻り値]
  ah = ワークの値
[説明]
  OPNDRV内部で使用しているワークの値を得ます。ワークの用途は以下の通りです。

FM/RTH音源用ワークエリア                PSG音源用ワークエリア

+-----+-------------------------------+ +-----+-------------------------------+
| NO. |  用途                         |	| NO. |  用途                         |
+-----+-------------------------------+	+-----+-------------------------------+
|   0 |音長(0〜127)                   |	|   0 |音長(0〜127)                   |
+-----+-------------------------------+	+-----+-------------------------------+
|   1 |音程                           |	|   1 |音程                           |
|     |上位4bitがオクターブ(0〜7)     |	|     |上位4bitがオクターブ(0〜7)     |
|     |下位4bitが音程(C=1,C+=2...B=12)|	|     |下位4bitが音程(C=1,C+=2...B=12)|
|     |          休符=0               |	|     |          休符=0               |
+-----+-------------------------------+	|     |ノイズモード時にはノイズ周波数 |
|   2 |キーオン時間                   |	+-----+-------------------------------+
+-----+-------------------------------+	|   2 |割り込み演奏フラグ(1で割り込み)|
|   3 |タイ                           |	+-----+-------------------------------+
+-----+-------------------------------+	|   3 |タイ                           |
|   4 |周波数下位8bit                 |	+-----+-------------------------------+
+-----+-------------------------------+	|   4 |ソフトウェアエンベロープ使用か |
|   5 |周波数上位8bit                 |	+-----+-------------------------------+
+-----+-------------------------------+	|   5 |ｿﾌﾄｳｪｱｴﾝﾍﾞﾛｰﾌﾟアドレス下位8bit |
|   6 |ポルタメントステップ           |	+-----+-------------------------------+
+-----+-------------------------------+	|   6 |ｿﾌﾄｳｪｱｴﾝﾍﾞﾛｰﾌﾟアドレス上位8bit |
|   7 |フラットタイムカウンタ         |	+-----+-------------------------------+
+-----+-------------------------------+	|   7 |ｿﾌﾄｳｪｱエンベロープスピード     |
|   8 |スピードカウンタ               |	+-----+-------------------------------+
+-----+-------------------------------+	|   8 |フェードアウトスピード         |
|   9 |ビブラート上下フラグ           |	+-----+-------------------------------+
+-----+-------------------------------+	|   9 |ボリューム                     |
|  10 |ステップ                       |	+-----+-------------------------------+
+-----+-------------------------------+	|  10 |トーン・ノイズモード値         |
|  11 |タイムスカウンタ               |	+-----+-------------------------------+
+-----+-------------------------------+	|  11 |周波数下位8bit                 |
|  12 |フェードアウトスピードカウンタ |	+-----+-------------------------------+
+-----+-------------------------------+	|  12 |周波数上位8bit                 |
|  13 |アルゴリズム                   |	+-----+-------------------------------+
+-----+-------------------------------+	|  13 |ポルタメントステップ           |
|  14 |OP1ボリューム                  |	+-----+-------------------------------+
+-----+-------------------------------+	|  14 |フラットタイムカウンタ         |
|  15 |OP2ボリューム                  |	+-----+-------------------------------+
+-----+-------------------------------+	|  15 |スピードカウンタ               |
|  16 |OP3ボリューム                  |	+-----+-------------------------------+
+-----+-------------------------------+	|  16 |ビブラートの上下フラグ         |
|  17 |OP4ボリューム                  |	+-----+-------------------------------+
+-----+-------------------------------+	|  17 |ステップカウンタ               |
|  18 |キーオフしたかどうか           |	+-----+-------------------------------+
+-----+-------------------------------+	|  18 |タイムスカウンタ               |
|  19 |データポインタアドレス下位8bit |	+-----+-------------------------------+
+-----+-------------------------------+	|  19 |ノイズ周波数                   |
|  20 |データポインタアドレス上位8bit |	+-----+-------------------------------+
+-----+-------------------------------+	|  20 |ノイズ用スライドスピードｶｳﾝﾀ   |
|  21 |スピード                       |	+-----+-------------------------------+
+-----+-------------------------------+	|  21 |ステップ                       |
|  22 |タイムス                       |	+-----+-------------------------------+
+-----+-------------------------------+	|  22 |フラットタイム                 |
|  23 |キーオン時間                   |	+-----+-------------------------------+
+-----+-------------------------------+	|  23 |スピード                       |
|  24 |周波数ずらし値                 |	+-----+-------------------------------+
+-----+-------------------------------+	|  24 |タイムス                       |
|  25 |フラットタイム                 |	+-----+-------------------------------+
+-----+-------------------------------+	|  25 |ｿﾌﾄｳｪｱｴﾝﾍﾞﾛｰﾌﾟｽﾀｰﾄｱﾄﾞﾚｽ下位8bit|
|  26 |フェードアウトスピード         |	+-----+-------------------------------+
+-----+-------------------------------+	|  26 |ｿﾌﾄｳｪｱｴﾝﾍﾞﾛｰﾌﾟｽﾀｰﾄｱﾄﾞﾚｽ上位8bit|
|27〜 |未使用                         |	+-----+-------------------------------+
|   30|                               |	|  27 |フェードアウトスピード         |
+-----+-------------------------------+	+-----+-------------------------------+
|   31|ビブラート有効OP               |	|  28 |ノイズ用スライドスピード       |
+-----+-------------------------------+	+-----+-------------------------------+
					|  29 |データポインタアドレス下位8bit |
                                        +-----+-------------------------------+
					|  30 |データポインタアドレス上位8bit |
					+-----+-------------------------------+
					|  31 |ディチューン                   |
					+-----+-------------------------------+

●14:SE演奏開始

[引数]
  ah = 14
  es:bx = 制御データのアドレス

  制御データ

　1バイト目: チャネル/優先順位データ

  bit7,bit6 = 使用チャネル(01=PSG3CH、10=PSG2CH、11=PSG2CH&PSG3CH)
  bit5〜bit0 = 優先順位データ(1〜63)。値が大きいほど優先順位が高い。
  
　2,3バイト目: PSG2CHのデータオフセット(WORD)
　4.5バイト目: PSG3CHのデータオフセット(WORD)

　※各データのセグメントは、esで示したものとなる。

[戻り値]
  なし

[説明]
  SE演奏を開始します。
  SEファイルを使っての演奏プログラムは、次のようになります。
  
--------------------
  ;es:bxにSEファイルの内容が入っているものとする
  ;alには、鳴らしたいSE番号が入っているとする
  
  ;alで指定されたSEの制御データアドレスを得る
  ;制御データアドレス = al * 5 + 6
  
  ;al = al * 5 ( = al * 2 * 2 + al)
  mov	ah, 0
  mov	cx, ax
  sal	ax, 1	; * 2
  sal	ax, 1	; * 2
  add	ax, cx	; + ax
  add	ax, 6
  
  mov	di, ax
  ;オフセットの補正(ファイルは、bx=0と過程されて作成されているため)
  add	es:[di + bx + 1], bx
  add	es:[di + bx + 3], bx
  
  
  push	bx
  push	di
  push	es
  mov	ah, 0eh
  add	bx, di
  int	41h
  pop	es
  pop	di
  pop	bx
  
  ;補正したものを戻す
  sub	es:[di + bx + 1], bx
  sub	es:[di + bx + 3], bx
--------------------

●15:OPNテンポチェンジ

[引数]
  ah = 15
  bl = Timer-Bのカウンタ値
[戻り値]
  なし
[説明]
  FM音源,PSG音源,RTH音源のテンポを変更します。blには、Timer-Bのカウンタ値を直接設定します。テンポとTimer-B設定値との関係は、以下の通りです。
  
  Timer-B設定値=256 - 208200/(division × テンポ)
  
  ただし、データ中にテンポを変更するコマンドが出てきた場合には、そのテンポが優先されます。

●16:レジスタリード

[引数]
  ah = 16
  dl = レジスタ番号
  dh = 拡張セレクタ(0でYM2203互換部、1でYM2608拡張部)
[戻り値]
  al = dlで指定したFM音源レジスタの内容
[説明]
  dlレジスタで指定されたFM音源チップ内のレジスタ値を得ます。dhレジスタで、YM2203とYM2608のレジスタ選択を行ないます。dh=0のとき、YM2203のレジスタが、dh=1のとき、YM2608のレジスタが選択されます。
　この関数は、FM音源チップ内からのデータを読むわけではないので、OPNDRV以外からFM音源チップ内レジスタを変更した場合は、無効です。

●17:ステータスリード

[引数]
  ah = 17
[戻り値]
  al = 各種ステータス
[説明]
  サウンドに関するステータスを得ます。ステータスは以下の通りです。

	bit0: FM音源再生 (0:再生中,1:停止中)
	bit1: PCM音源再生(0:再生中,1:停止中)
	bit4: ポート番号が(0:188h, 1:288h)
	bit5: PCM音源が(0:存在しない,1:存在する)
	bit6: YM2608が(0:存在しない,1:存在する)
	bit7: FM音源ボードが(0:存在しない,1:存在する)

●18:OPN常駐演奏

[引数]
  ah = 18
  es:bx = 演奏データアドレス
  dx:cx = データサイズ
  
  es:bxの差す内容

      FM音源チャネル1のデータアドレスオフセット(WORD)
      FM音源チャネル2〜3に関して同上
      PSG音源チャネル1〜3に関して同上
      FM音源チャネル4〜6に関して同上
      RTH音源チャネル1〜6に関して同上
  ※各データのセグメントは、esで示したものとなる。
  ※オフセットは、es:bxからのオフセット
  
[戻り値]
  ax = 0(エラーなし)、ax = 0ffffh(バッファが足りない)
[説明]
  OPNデータを常駐させて演奏開始します。
  es:bxは、OPNファイルの第7バイト目を指せばOKです。dx:cxでデータサイズを指定します。

●19:SEデータ常駐

[引数]
  ah = 19
  es:bx = SEデータアドレス
  dx:cx = データサイズ
  
[戻り値]
  ax = 0(エラーなし)、ax = 0ffffh(バッファが足りない)
[説明]
  SEデータをOPNDRV内部バッファに転送します。es:bxは、SEデータ(=SEファイル読み込みアドレス)の先頭を差してください。

●20:MIDIイニシャライズ

[引数]
  ah = 20
  dl = インターフェースの種類(1=MPU401, 2=RS232C)
[戻り値]
  ax = 0(エラーなし), ax = 0以外(インターフェース使用不可)
[説明]
  MIDI機能をイニシャライズします。MIDI関連ファンクションを呼ぶ前に必ず実行してください。dlでインターフェースを指定します。
　dl=2を指定してRS-232Cインターフェースを指定した場合には、たとえRS-232CにMIDI機器がつながっていなくとも、イニシャライズには必ず成功して、axに0を返すので注意してください。

●21:MIDI使用終了

[引数]
  ah = 21
[戻り値]
  なし
[説明]
  MIDI機器にall note offを発行して、以降MIDI関連の割り込みを戻します。再度MIDIを使用するには、ファンクション20のMIDIイニシャライズを呼び出してください。

●22:MIDI演奏開始

[引数]
  ah = 22
  es:bx = (標準MIDIファイル形式の)MIDIデータのあるアドレス
[戻り値]
  ax = 0(エラーなし), ax = 1(標準MIDIファイル形式でない), ax = 2(インターフェース使用不可)
[説明]
  MIDIの演奏を開始します。引数es:bxには、標準MIDIファイル形式のデータが入っているアドレスを入れます。対応しているフォーマットは、format0とformat1です。format1の場合には、はじめの50トラックのみが有効となります。
  演奏終了まで、データを破壊してはなりません。

●23:MIDI演奏停止

[引数]
  ah = 23
[戻り値]
  なし
[説明]
  MIDIの演奏を止めます。all note offおよびstop command(0fch)がMIDIに送出されます。

●24:MIDI演奏再開

[引数]
  ah = 24
[戻り値]
  なし
[説明]
  ファンクション23のMIDI演奏停止で停止させた曲を再開します。continue command(0fdh)がMIDIに送出されます。

●25:MIDIフェード

[引数]
  ah = 25
  cx = フェード処理を行なう時間(単位はgatetime)
  dl = はじめのベロシティ補正値
  dh = おわりのベロシティ補正値
[戻り値]
  なし
[説明]
  MIDIのフェード処理を行ないます。ベロシティ補正値がcxの時間内で、dlからdhに直線的に変化します。以後、
  
　演奏されるベロシティ値=データ中のベロシティ値×ベロシティ補正値/128

  となります。ですから、ベロシティ補正値が128で通常のベロシティ値となります。つまり、フェードアウトさせたい場合には、dl=128、dh=0を指定します。フェードインの場合は、dl=0, dh = 128です。なお、ベロシティ補正値は、フェード処理後はずっとdhの値を保もったままですので注意してください。新たに演奏開始しても、ベロシティ補正値は標準値には戻りません。

●26:MIDIステータス読み出し

[引数]
  ah = 26
[戻り値]
  al = 0(演奏中), al = 1(待機中), al = 2(演奏終了)
  ah = ベロシティ補正値
[説明]
  MIDIステータスを得ます。ベロシティ補正値を見れば、フェード処理をする場合、フェードが完了したかどうかのチェックが行なえます。

●27:テンポ補正

[引数]
  ah = 27
  dx = テンポ補正値
[戻り値]
  なし
[説明]
  テンポ補正値を指定します。以降、データ中のテンポ×テンポ補正値/256のテンポで演奏されます。dxの値のチェックはしていませんが、極端に大きな値や小さな値を設定すると暴走します。128<dx<512の範囲を推奨します。

●28:MIDIコマンドサブルーチンの設定

[引数]
  ah = 28
  es:bx = サブルーチンアドレス
[戻り値]
  なし
[説明]
  MIDIコマンド解析のたびに呼び出されるユーザーサブルーチンを指定します。このファンクション呼び出し後は、MIDIコマンドを解析するたびにes:bxがfar callされます。
  ユーザーサブルーチンが呼び出された時の各レジスタの内容は、以下の通りです。

  ds:di コマンドアドレス
  al MIDIコマンド(=ds:[di])
  cx トラック番号(0オリジン)

  サブルーチン内部では、ds:di以外は破壊して構いません。リターン時に、キャリーフラグを1にすると、戻った時のds:diからMIDI解析が行なわれます。キャリーが0であれば、そのコマンドから解析が開始されます。
  このファンクションは、ファンクション20のMIDIイニシャライズを呼ぶまで有効です。
●29:MIDIメタイベント拡張

[引数]
  ah = 29
[戻り値]
  なし
[説明]
　このファンクションを呼ぶと、以降、下記のメタイベントを特殊解釈します。
  (1)ff, 07, 04, 'M', 'a', 'r', 'k' 
     出てきた位置をマークします。
  (2)ff, 07, 04, 'J', 'u', 'm', 'p'
     1でマークした位置にジャンプします。

●30:MIDIコマンド送出

[引数]
  ah = 30
  dl = MIDIデータ
[戻り値]
  なし
[説明]
　指定されたMIDIコマンドを、MIDI機器に送信します。

●31:MIDI常駐演奏

[引数]
  ah = 31
  es:bx = MIDIデータアドレス
  dx:cx = データサイズ
[戻り値]
  ax = 0(エラーなし)、ax = 0ffffh(バッファが足りない)、ax = 1(標準MIDIファイル形式でない), ax = 2(インターフェース使用不可)
[説明]
  MIDIデータを常駐させて演奏させます。

●40:PCM再生スタート

[引数]
  ah = 40
  es:bx = PCMデータアドレス
  
  ※PCMデータは、WAV2PCMで作られるPCMファイルの先頭5バイト(=IDの"PCM"及びバージョン)を削ったもの。詳細は、PCMファイル構造を参照。

[戻り値]
  なし
[説明]
  PCMを再生します。再生中は、PCMデータを破壊しないでください。なお、ファンクション実行から、実際に再生されるまで多少時間がかかります。

●41:PCMストップ

[引数]
  ah = 41
[戻り値]
  なし
[説明]
  PCMを止めます。

●42:PCM常駐再生

[引数]
  ah = 42
  es:bx = PCMデータアドレス
  dx:cx = データサイズ
  
  ※PCMデータは、WAV2PCMで作られるPCMファイルの先頭5バイト(=IDの"PCM"及びバージョン)を削ったもの。詳細は、PCMファイル構造を参照。

[戻り値]
  ax = 0(正常終了)、ax = 0ffffh(バッファが足りない)
[説明]
  PCMを常駐再生します。なお、ファンクション実行から、実際に再生されるまで多少時間がかかります。

●50:内部変数読み込み

[引数]
  ah = 50
  dl = 内部変数番号(0〜99)
[戻り値]
  al = dlで指定された内部変数番号の内容
[説明]
  OPNDRV内部で使用している内部変数の値を得ます。
